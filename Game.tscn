[gd_scene load_steps=7 format=1]

[sub_resource type="GDScript" id=1]

script/source = "extends Node

onready var rod_panel = get_node(\"RodPanel\")
onready var reactor_panel = get_node(\"ReactorPanel\")

var rsize_w = 9
var rsize_h = 9

var rods = []
var power = []

class rod:
	var pos = 0
	var x = 0
	var y = 0

func _ready():
	reactor_start_state()
	rod_panel.reset_buttons()
	rod_panel.rod_update()

func reactor_update():
	
	reactor_panel.labels_update()

func reactor_start_state():
	for i in range(rsize_w*rsize_h):
		power.push_back(0)
	for h in range(rsize_h):
		for w in range(rsize_w):
			if (plan_default[w + h*rsize_h] == 2):
				var obj = rod.new()
				obj.x = w
				obj.y = h
				rods.push_back(obj)
	

func rod_move(rod, d):
	rods[rod].pos = clamp(rods[rod].pos + d, 0, 100)

var plan_default = [0,0,1,1,1,1,1,0,0,
					0,1,1,2,1,2,1,1,0,
					1,2,1,1,1,1,1,2,1,
					1,1,1,2,1,2,1,1,1,
					1,2,1,1,1,1,1,2,1,
					1,1,1,2,1,2,1,1,1,
					1,2,1,1,1,1,1,2,1,
					0,1,1,2,1,2,1,1,0,
					0,0,1,1,1,1,1,0,0]
"

[sub_resource type="GDScript" id=2]

script/source = "extends Control

onready var game = get_node(\"..\")

const MIN_IND_SIZE = 20
const MAX_IND_SIZE = 80

onready var img = preload(\"assets/c0.tex\")

var inds = []
var label_info = []
var ind_labels = []

var cell_count
var power_display = false

func _ready():
	reset_ind()
	pass

func labels_update():
	if (power_display):
		for i in range(cell_count):
			if (label_info[i].exist):
				ind_labels[i].set_text(str(game.power[i]))

func labels_set():
	if (!power_display):
		for i in range(cell_count):
			if (label_info[i].exist):
				ind_labels[i].set_text(\"%d-%d\" % [label_info[i].x,label_info[i].y])

func reset_ind():
	cell_count = game.rsize_w*game.rsize_h
	var size_x = get_size().x / game.rsize_w
	var size_y = get_size().y / game.rsize_h
	var ind_size = clamp(min(size_x, size_y), MIN_IND_SIZE, MAX_IND_SIZE)
	
	var ind = get_node(\"Indicator\")
	
	ind_labels.clear()
	for i in inds:
		i.free()
	inds.clear()
	
	var offset = Vector2(get_size().x - game.rsize_w*ind_size, get_size().y - game.rsize_h*ind_size)*0.5
	for h in range(game.rsize_h):
		for w in range(game.rsize_w):
			var obj = ind.duplicate()
			obj.set_size(Vector2(ind_size, ind_size))
			obj.set_pos(Vector2(w*ind_size, h*ind_size) + offset)
			add_child(obj)
			var label = obj.get_node(\"Label\")
			if (game.plan_default[w + h*game.rsize_h] == 1):
				obj.set_texture(img)
				obj.set_modulate(Color(0.4, 0.4, 0.4))
				label.set_text(\"%d-%d\" % [w,h])
			elif (game.plan_default[w + h*game.rsize_h] == 2):
				obj.set_texture(img)
				obj.set_modulate(Color(0.2, 0.4, 0.2))
				label.set_text(\"%d-%d\" % [w,h])
			obj.show()
			inds.push_back(obj)
			ind_labels.push_back(label)
			label_info.push_back({x = w, y = h, exist = (game.plan_default[w + h*game.rsize_h] != 0)})


func _on_PowerDisp_toggled(pressed):
	power_display = pressed
	labels_set()
	labels_update()
"

[sub_resource type="GDScript" id=3]

script/source = "extends Panel

# class member variables go here, for example:
# var a = 2
# var b = \"textvar\"

func _ready():
	# Called every time the node is added to the scene.
	# Initialization here
	pass
"

[sub_resource type="GDScript" id=4]

script/source = "extends Control

onready var game = get_node(\"..\")
onready var rod_control = get_node(\"../RodControl\")

var rod_btn_mode = false
var rod_count

var rod_btn = []
var rod_btn_label = []

var current_rod

var min_btn_size = 40
var max_btn_size = 80
var max_btn_dis = 320

func _ready():
	pass

func rod_update():
	for i in range(rod_count):
		rod_btn_label[i].set_text(str(game.rods[i].pos))

func reset_buttons():
	var rods = []
	for i in range(game.rsize_h):
		rods.append([])
	for i in range(game.rods.size()):
		rods[game.rods[i].y].append({x = game.rods[i].x, y = game.rods[i].y, id = i})
	for i in range(rods.size()-1, -1, -1):
		if (rods[i].empty()):
			rods.remove(i)
	
	rod_count = 0
	for i in rods:
		rod_count += i.size()
	
	var max_x = 0
	var max_y = rods.size()
	for i in rods:
		if (i.size() > max_x):
			max_x = i.size()
	
	var size_x = get_size().x / max_x
	var size_y = get_size().y / max_y
	var btn_size = clamp(min(size_x, size_y), min_btn_size, max_btn_size)
	
	var rod_offset = []
	for i in range(rods.size()):
		rod_offset.append([])
	for h in range(rods.size()):
		for i in range(rods[h].size()):
			if (i > 0):
				rod_offset[h].append(clamp((rods[h][i].x - rods[h][i-1].x) * btn_size, 0, max_btn_dis))
			else:
				rod_offset[h].append(0)
	
	var btn = get_node(\"RodBtn\")
	
	for i in rod_btn:
		i.free()
	rod_btn.clear()
	
	var offset_y = (get_size().y - max_y*btn_size)*0.5
	for h in range(rods.size()):
		var dis = 0
		for i in rod_offset[h]:
			dis += i
		var real_dis = clamp(dis, (get_size().x - max_x*btn_size), dis)
		var k = real_dis / dis
		for i in rod_offset[h]:
			i *= k
		var offset_x = (get_size().x - max_x*btn_size - dis)*0.5
		var offset = Vector2(offset_x, offset_y)
		var count_x = 0
		for w in range(rods[h].size()):
			var obj = btn.duplicate()
			obj.set_size(Vector2(btn_size, btn_size))
			obj.set_pos(Vector2(rod_offset[h][w] + count_x, h*btn_size) + offset)
			count_x += rod_offset[h][w]
			add_child(obj)
			obj.show()
			obj.get_node(\"Button\").connect(\"pressed\", get_node(\".\"), \"_rod_btn_click\", [rods[h][w].id])
			rod_btn.push_back(obj.get_node(\"Button\"))
			obj.get_node(\"Button\").set_text(\"%d-%d\" % [rods[h][w].x, rods[h][w].y])
			rod_btn_label.push_back(obj.get_node(\"Label\"))
	
	current_rod = 0
	rod_btn[current_rod].set_pressed(true)

func _rod_btn_click(id):
	rod_btn[current_rod].set_pressed(false)
	current_rod = id
	rod_btn[current_rod].set_pressed(true)
	rod_control.update_info()
"

[sub_resource type="GDScript" id=5]

script/source = "extends Panel

onready var game = get_node(\"..\")
onready var rod_panel = get_node(\"../RodPanel\")

onready var rod_id = get_node(\"RodId\")
onready var rod_pos = get_node(\"RodPos\")
onready var shift_btn = get_node(\"Shift\")

var shift = false
var rod_mul = 1

func _ready():
	
	pass



func update_info():
	rod_id.set_text(\"Rod: %d-%d\" % [game.rods[rod_panel.current_rod].x, game.rods[rod_panel.current_rod].y])
	rod_pos.set_text(\"Rod pos: %d\" % game.rods[rod_panel.current_rod].pos)


func _on_RodUp_pressed():
	game.rod_move(rod_panel.current_rod, 1 * rod_mul)
	update_info()
	rod_panel.rod_update()


func _on_RodDown_pressed():
	game.rod_move(rod_panel.current_rod, -1 * rod_mul)
	update_info()
	rod_panel.rod_update()


func _on_Shift_pressed():
	if (shift):
		shift = false
		rod_mul = 1
		shift_btn.set_pressed(false)
	else:
		shift = true
		rod_mul = 10
		shift_btn.set_pressed(true)
"

[sub_resource type="GDScript" id=6]

script/source = "extends Button

onready var rod_panel = get_node(\"../RodPanel\")
onready var options = get_node(\"Options\")

func _ready():
	
	pass


func _on_Debug_pressed():
	if (options.is_visible()):
		options.hide()
	else:
		options.show()


func _on_UPD_pressed():
	rod_panel.rod_update()
"

[node name="Game" type="Node"]

script/script = SubResource( 1 )

[node name="ReactorPanel" type="Control" parent="."]

editor/display_folded = true
anchor/right = 3
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 60.0
margin/right = 0.0
margin/bottom = 100.0
script/script = SubResource( 2 )

[node name="Panel" type="Panel" parent="ReactorPanel"]

anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 0.0
margin/right = 0.0
margin/bottom = 0.0

[node name="Indicator" type="TextureFrame" parent="ReactorPanel"]

editor/display_folded = true
focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 0.0
margin/right = 40.0
margin/bottom = 40.0
expand = true
stretch_mode = 0

[node name="Label" type="Label" parent="ReactorPanel/Indicator"]

anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 0.0
margin/top = 0.0
margin/right = 0.0
margin/bottom = 0.0
align = 1
valign = 1
clip_text = true
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="PowerDisp" type="CheckButton" parent="ReactorPanel"]

anchor/top = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 36.0
margin/right = 160.0
margin/bottom = 0.0
toggle_mode = true
enabled_focus_mode = 2
shortcut = null
text = "power display"
flat = false
align = 0

[node name="ReactorControl" type="Panel" parent="."]

anchor/top = 1
anchor/right = 3
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 100.0
margin/right = 0.0
margin/bottom = 0.0
script/script = SubResource( 3 )

[node name="RodPanel" type="Control" parent="."]

editor/display_folded = true
anchor/left = 3
anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 60.0
margin/right = 0.0
margin/bottom = 100.0
script/script = SubResource( 4 )

[node name="Panel" type="Panel" parent="RodPanel"]

anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 0.0
margin/right = 0.0
margin/bottom = 0.0

[node name="RodBtn" type="Panel" parent="RodPanel"]

editor/display_folded = true
visibility/visible = false
rect/min_size = Vector2( 40, 40 )
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 0.0
margin/right = 12.0
margin/bottom = 20.0

[node name="Button" type="Button" parent="RodPanel/RodBtn"]

anchor/top = 2
anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 0.34
margin/right = 0.0
margin/bottom = 0.0
toggle_mode = true
enabled_focus_mode = 2
shortcut = null
flat = false

[node name="Label" type="Label" parent="RodPanel/RodBtn"]

anchor/right = 1
anchor/bottom = 2
focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 0.0
margin/top = 0.0
margin/right = 0.0
margin/bottom = 0.34
align = 1
valign = 1
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="RodControl" type="Panel" parent="."]

editor/display_folded = true
anchor/left = 3
anchor/top = 1
anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 100.0
margin/right = 0.0
margin/bottom = 0.0
script/script = SubResource( 5 )

[node name="RodUp" type="Button" parent="RodControl"]

anchor/left = 1
anchor/right = 1
anchor/bottom = 2
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 60.0
margin/top = 0.0
margin/right = 0.0
margin/bottom = 0.5
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
text = "^"
flat = false

[node name="RodDown" type="Button" parent="RodControl"]

anchor/left = 1
anchor/top = 2
anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 60.0
margin/top = 0.5
margin/right = 0.0
margin/bottom = 0.0
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
text = "v"
flat = false

[node name="RodId" type="Label" parent="RodControl"]

focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 0.0
margin/top = 0.0
margin/right = 40.0
margin/bottom = 14.0
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="RodPos" type="Label" parent="RodControl"]

focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 0.0
margin/top = 20.0
margin/right = 40.0
margin/bottom = 34.0
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="Shift" type="Button" parent="RodControl"]

anchor/top = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 40.0
margin/right = 40.0
margin/bottom = 0.0
toggle_mode = true
enabled_focus_mode = 2
shortcut = null
text = "SH"
flat = false

[node name="Debug" type="Button" parent="."]

anchor/left = 3
anchor/right = 3
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 20.0
margin/top = 0.0
margin/right = -20.0
margin/bottom = 40.0
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
text = "Dbg"
flat = false
script/script = SubResource( 6 )

[node name="Options" type="ButtonGroup" parent="Debug"]

editor/display_folded = true
visibility/visible = false
anchor/left = 3
anchor/top = 1
anchor/right = 3
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = false
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 20.0
margin/top = 0.0
margin/right = -20.0
margin/bottom = -80.0
alignment = 0

[node name="UPD" type="Button" parent="Debug/Options"]

focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 20.0
margin/right = 41.0
margin/bottom = 40.0
toggle_mode = true
click_on_press = true
enabled_focus_mode = 2
shortcut = null
text = "UPD"
flat = false

[node name="Panel" type="Panel" parent="."]

anchor/right = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 0.0
margin/right = 0.0
margin/bottom = 60.0

[connection signal="toggled" from="ReactorPanel/PowerDisp" to="ReactorPanel" method="_on_PowerDisp_toggled"]

[connection signal="pressed" from="RodControl/RodUp" to="RodControl" method="_on_RodUp_pressed"]

[connection signal="pressed" from="RodControl/RodDown" to="RodControl" method="_on_RodDown_pressed"]

[connection signal="pressed" from="RodControl/Shift" to="RodControl" method="_on_Shift_pressed"]

[connection signal="pressed" from="Debug" to="Debug" method="_on_Debug_pressed"]

[connection signal="pressed" from="Debug/Options/UPD" to="Debug" method="_on_UPD_pressed"]


