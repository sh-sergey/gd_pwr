[gd_scene load_steps=9 format=1]

[ext_resource path="res://assets/lcd.fnt" type="BitmapFont" id=1]

[sub_resource type="GDScript" id=1]

script/source = "extends Node

onready var rod_panel = get_node(\"RodPanel\")
onready var reactor_panel = get_node(\"ReactorPanel\")
onready var reactor_control = get_node(\"ReactorControl\")
onready var main_panel = get_node(\"MainPanel\")
onready var timer = get_node(\"Timer\")
onready var help = get_node(\"Help\")

var rsize_w = 9
var rsize_h = 9

var rods = []
var cells = []
var cell_dis = []
var cell_count

const NEUT_E = 0.64e-7
var AVR_NEUT_OUT = 2.5
var USING_THERM_NEUT = 0.02
var NEUT_CYCLE = 1.0e3
var AIR_POWER = 2.0e3

var dt = 1

var second = 0
var minute = 0
var hour = 0
var day = 1

var full_power = 0
var avr_npower = 0
var avr_reactivity = 1.0

class rod:
	var pos = 0
	var x = 0
	var y = 0

class cell:
	var exist = true
	var x = 0
	var y = 0
	var id = 0
	var npower = 0
	var power = 0

func _ready():
	OS.set_window_position((OS.get_screen_size() - OS.get_window_size()) / 2)
	
	for i in range(9):
		cell_dis.append(1/Vector2(i%3-1, i/3-1).length())
	print(false*12)
	reactor_start_state()
	rod_panel.reset_buttons()
	rod_panel.rod_update()
	main_panel.info_update()
	
	help.popup()

func time(start):
	if (start):
		timer.start()
	else:
		timer.stop()

func time_set(value):
	pass

func reactor_update():
	second += dt
	while (second >= 60):
		second -= 60
		minute += 1
	if (minute > 59):
		minute -= 60
		hour += 1
	if (hour > 23):
		hour -= 24
		day += 1
	
	var react = 0
	for p in cells:
		p.npower = p.npower*AVR_NEUT_OUT*USING_THERM_NEUT*NEUT_CYCLE
		react += p.npower*NEUT_E / p.power
		p.power = p.npower*NEUT_E
		
	for p in rods:
		pass
	
	react = react / cell_count
	
	avr_reactivity = react
	
	main_panel.info_update()
	reactor_panel.labels_update()
	reactor_control.info_update()

func reactor_start_state():
	cell_count = 0
	for i in range(rsize_w*rsize_h):
		var obj = cell.new()
		obj.x = i%rsize_w
		obj.y = i/rsize_w
		obj.exist = (plan_default[i] != 0)
		obj.id = i
		obj.npower = AIR_POWER
		obj.power = obj.npower*NEUT_E
		if (plan_default[i] == 0):
			cell_count += 1
		cells.push_back(obj)
	for h in range(rsize_h):
		for w in range(rsize_w):
			if (plan_default[w + h*rsize_h] == 2):
				var obj = rod.new()
				obj.x = w
				obj.y = h
				rods.push_back(obj)
	

func rod_move(rod, d):
	rods[rod].pos = clamp(rods[rod].pos + d, 0, 100)

var plan_default = [0,0,1,1,1,1,1,0,0,
					0,1,1,2,1,2,1,1,0,
					1,2,1,1,1,1,1,2,1,
					1,1,1,2,1,2,1,1,1,
					1,2,1,1,1,1,1,2,1,
					1,1,1,2,1,2,1,1,1,
					1,2,1,1,1,1,1,2,1,
					0,1,1,2,1,2,1,1,0,
					0,0,1,1,1,1,1,0,0]


func _on_Timer_timeout():
	reactor_update()
"

[sub_resource type="GDScript" id=2]

script/source = "extends Panel

onready var game = get_node(\"..\")
onready var time_btn = get_node(\"Time/Button\")
onready var time_current = get_node(\"Time/Current\")

func _ready():
	# Called every time the node is added to the scene.
	# Initialization here
	pass

func info_update():
	time_current.set_text(\"%02d:%02d:%02d day %d\" % [floor(game.second), game.minute, game.hour, game.day])

func _on_Button_pressed():
	game.time(time_btn.is_pressed())


func _on_HSlider_value_changed(value):
	game.dt = pow(floor(value), 4)


func _on_HelpBtn_pressed():
	game.help.popup()
"

[sub_resource type="GDScript" id=3]

script/source = "extends Control

onready var game = get_node(\"..\")

const MIN_IND_SIZE = 20
const MAX_IND_SIZE = 80

onready var img = preload(\"assets/c0.tex\")

var inds = []
var label_info = []
var ind_labels = []

var cell_count
var power_display = false

func _ready():
	reset_ind()
	pass

func labels_update():
	if (power_display):
		for i in range(cell_count):
			if (label_info[i].exist):
				ind_labels[i].set_text(str(game.cells[i].power*1.0e-3).pad_decimals(1))

func labels_set():
	if (!power_display):
		for i in range(cell_count):
			if (label_info[i].exist):
				ind_labels[i].set_text(\"%d-%d\" % [label_info[i].x,label_info[i].y])

func reset_ind():
	cell_count = game.rsize_w*game.rsize_h
	var size_x = get_size().x / game.rsize_w
	var size_y = get_size().y / game.rsize_h
	var ind_size = clamp(min(size_x, size_y), MIN_IND_SIZE, MAX_IND_SIZE)
	
	var ind = get_node(\"Indicator\")
	
	ind_labels.clear()
	for i in inds:
		i.free()
	inds.clear()
	
	var offset = Vector2(get_size().x - game.rsize_w*ind_size, get_size().y - game.rsize_h*ind_size)*0.5
	for h in range(game.rsize_h):
		for w in range(game.rsize_w):
			var obj = ind.duplicate()
			obj.set_size(Vector2(ind_size, ind_size))
			obj.set_pos(Vector2(w*ind_size, h*ind_size) + offset)
			add_child(obj)
			var label = obj.get_node(\"Label\")
			if (game.plan_default[w + h*game.rsize_h] == 1):
				obj.set_texture(img)
				obj.set_modulate(Color(0.4, 0.4, 0.4))
				label.set_text(\"%d-%d\" % [w,h])
			elif (game.plan_default[w + h*game.rsize_h] == 2):
				obj.set_texture(img)
				obj.set_modulate(Color(0.2, 0.4, 0.2))
				label.set_text(\"%d-%d\" % [w,h])
			obj.show()
			inds.push_back(obj)
			ind_labels.push_back(label)
			label_info.push_back({x = w, y = h, exist = (game.plan_default[w + h*game.rsize_h] != 0)})


func _on_PowerDisp_toggled(pressed):
	power_display = pressed
	labels_set()
	labels_update()
"

[sub_resource type="GDScript" id=4]

script/source = "extends Panel

onready var game = get_node(\"..\")

onready var reactivity = get_node(\"Reactivity\")
onready var period = get_node(\"Period\")

func _ready():
	
	pass

func info_update():
	reactivity.set_text(str(game.avr_reactivity).pad_decimals(4))
	period.set_text(str(1 / game.avr_reactivity).pad_decimals(4))
"

[sub_resource type="GDScript" id=5]

script/source = "extends Control

onready var game = get_node(\"..\")
onready var rod_control = get_node(\"../RodControl\")

var rod_btn_mode = false
var rod_count

var rod_btn = []
var rod_btn_label = []

var current_rod

var min_btn_size = 40
var max_btn_size = 80
var max_btn_dis = 320

func _ready():
	pass

func rod_update():
	for i in range(rod_count):
		rod_btn_label[i].set_text(str(game.rods[i].pos))

func reset_buttons():
	var rods = []
	for i in range(game.rsize_h):
		rods.append([])
	for i in range(game.rods.size()):
		rods[game.rods[i].y].append({x = game.rods[i].x, y = game.rods[i].y, id = i})
	for i in range(rods.size()-1, -1, -1):
		if (rods[i].empty()):
			rods.remove(i)
	
	rod_count = 0
	for i in rods:
		rod_count += i.size()
	
	var max_x = 0
	var max_y = rods.size()
	for i in rods:
		if (i.size() > max_x):
			max_x = i.size()
	
	var size_x = get_size().x / max_x
	var size_y = get_size().y / max_y
	var btn_size = clamp(min(size_x, size_y), min_btn_size, max_btn_size)
	
	var rod_offset = []
	for i in range(rods.size()):
		rod_offset.append([])
	for h in range(rods.size()):
		for i in range(rods[h].size()):
			if (i > 0):
				rod_offset[h].append(clamp((rods[h][i].x - rods[h][i-1].x) * btn_size, 0, max_btn_dis))
			else:
				rod_offset[h].append(0)
	
	var btn = get_node(\"RodBtn\")
	
	for i in rod_btn:
		i.free()
	rod_btn.clear()
	
	var offset_y = (get_size().y - max_y*btn_size)*0.5
	for h in range(rods.size()):
		var dis = 0
		for i in rod_offset[h]:
			dis += i
		var real_dis = clamp(dis, (get_size().x - max_x*btn_size), dis)
		var k = real_dis / dis
		for i in rod_offset[h]:
			i *= k
		var offset_x = (get_size().x - max_x*btn_size - dis)*0.5
		var offset = Vector2(offset_x, offset_y)
		var count_x = 0
		for w in range(rods[h].size()):
			var obj = btn.duplicate()
			obj.set_size(Vector2(btn_size, btn_size))
			obj.set_pos(Vector2(rod_offset[h][w] + count_x, h*btn_size) + offset)
			count_x += rod_offset[h][w]
			add_child(obj)
			obj.show()
			obj.get_node(\"Button\").connect(\"pressed\", get_node(\".\"), \"_rod_btn_click\", [rods[h][w].id])
			rod_btn.push_back(obj.get_node(\"Button\"))
			obj.get_node(\"Button\").set_text(\"%d-%d\" % [rods[h][w].x, rods[h][w].y])
			rod_btn_label.push_back(obj.get_node(\"Label\"))
	
	current_rod = 0
	rod_btn[current_rod].set_pressed(true)

func _rod_btn_click(id):
	rod_btn[current_rod].set_pressed(false)
	current_rod = id
	rod_btn[current_rod].set_pressed(true)
	rod_control.update_info()
"

[sub_resource type="StyleBoxFlat" id=6]

content_margin/left = -1.0
content_margin/right = -1.0
content_margin/top = -1.0
content_margin/bottom = -1.0
bg_color = Color( 0.0627451, 0.0588235, 0.0705882, 1 )
light_color = Color( 0.0627451, 0.0588235, 0.0705882, 1 )
dark_color = Color( 0.0627451, 0.0588235, 0.0705882, 1 )
border_size = 0
border_blend = true
draw_bg = true

[sub_resource type="GDScript" id=7]

script/source = "extends Panel

onready var game = get_node(\"..\")
onready var rod_panel = get_node(\"../RodPanel\")

onready var rod_id = get_node(\"Rod/Id\")
onready var rod_pos = get_node(\"Rod/Pos\")
onready var shift_btn = get_node(\"Rod/Shift\")

var shift = false
var rod_mul = 1

func _ready():
	
	pass



func update_info():
	rod_id.set_text(\"Rod: %d-%d\" % [game.rods[rod_panel.current_rod].x, game.rods[rod_panel.current_rod].y])
	rod_pos.set_text(\"Rod pos: %d\" % game.rods[rod_panel.current_rod].pos)


func _on_RodUp_pressed():
	game.rod_move(rod_panel.current_rod, 1 * rod_mul)
	update_info()
	rod_panel.rod_update()


func _on_RodDown_pressed():
	game.rod_move(rod_panel.current_rod, -1 * rod_mul)
	update_info()
	rod_panel.rod_update()


func _on_Shift_pressed():
	if (shift):
		shift = false
		rod_mul = 1
		shift_btn.set_pressed(false)
	else:
		shift = true
		rod_mul = 10
		shift_btn.set_pressed(true)
"

[node name="Game" type="Node"]

script/script = SubResource( 1 )

[node name="MainPanel" type="Panel" parent="."]

anchor/right = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 0.0
margin/right = 0.0
margin/bottom = 60.0
script/script = SubResource( 2 )

[node name="Time" type="Panel" parent="MainPanel"]

editor/display_folded = true
anchor/left = 1
anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 200.0
margin/top = 0.0
margin/right = 0.0
margin/bottom = 0.0

[node name="Button" type="Button" parent="MainPanel/Time"]

anchor/left = 1
anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 60.0
margin/top = 0.0
margin/right = 0.0
margin/bottom = 0.0
toggle_mode = true
enabled_focus_mode = 2
shortcut = null
text = ">"
flat = false

[node name="HSlider" type="HSlider" parent="MainPanel/Time"]

anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 4.0
margin/top = 0.0
margin/right = 64.0
margin/bottom = 0.0
range/min = 1.0
range/max = 4.0
range/step = 1.0
range/page = 0.0
range/value = 1.0
range/exp_edit = false
range/rounded = true
tick_count = 4
ticks_on_borders = true
focus_mode = 2

[node name="Current" type="Label" parent="MainPanel/Time"]

anchor/top = 3
anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 0.0
margin/top = 0.0
margin/right = 60.0
margin/bottom = 0.0
align = 1
valign = 1
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="HelpBtn" type="Button" parent="MainPanel"]

anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 0.0
margin/right = 80.0
margin/bottom = 0.0
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
text = "Help"
flat = false

[node name="ReactorPanel" type="Control" parent="."]

anchor/right = 3
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 60.0
margin/right = 0.0
margin/bottom = 100.0
script/script = SubResource( 3 )

[node name="Panel" type="Panel" parent="ReactorPanel"]

anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 0.0
margin/right = 0.0
margin/bottom = 0.0

[node name="Indicator" type="TextureFrame" parent="ReactorPanel"]

editor/display_folded = true
focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 0.0
margin/right = 40.0
margin/bottom = 40.0
expand = true
stretch_mode = 0

[node name="Label" type="Label" parent="ReactorPanel/Indicator"]

anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 0.0
margin/top = 0.0
margin/right = 0.0
margin/bottom = 0.0
align = 1
valign = 1
clip_text = true
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="PowerDisp" type="CheckButton" parent="ReactorPanel"]

anchor/top = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 36.0
margin/right = 80.0
margin/bottom = 0.0
toggle_mode = true
enabled_focus_mode = 2
shortcut = null
text = "power"
flat = false
align = 0

[node name="ReactorControl" type="Panel" parent="."]

editor/display_folded = true
anchor/top = 1
anchor/right = 3
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 100.0
margin/right = 0.0
margin/bottom = 0.0
script/script = SubResource( 4 )

[node name="Reactivity" type="Label" parent="ReactorControl"]

focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 0.0
margin/top = 0.0
margin/right = 80.0
margin/bottom = 14.0
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="Period" type="Label" parent="ReactorControl"]

focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 0.0
margin/top = 14.0
margin/right = 80.0
margin/bottom = 28.0
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="RodPanel" type="Control" parent="."]

editor/display_folded = true
anchor/left = 3
anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 60.0
margin/right = 0.0
margin/bottom = 100.0
script/script = SubResource( 5 )

[node name="Panel" type="Panel" parent="RodPanel"]

anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 0.0
margin/right = 0.0
margin/bottom = 0.0

[node name="RodBtn" type="Panel" parent="RodPanel"]

editor/display_folded = true
visibility/visible = false
rect/min_size = Vector2( 40, 40 )
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 0.0
margin/right = 12.0
margin/bottom = 20.0
custom_styles/panel = SubResource( 6 )

[node name="Button" type="Button" parent="RodPanel/RodBtn"]

anchor/top = 2
anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 0.38
margin/right = 0.0
margin/bottom = 0.0
toggle_mode = true
enabled_focus_mode = 2
shortcut = null
flat = false

[node name="Label" type="Label" parent="RodPanel/RodBtn"]

anchor/right = 1
anchor/bottom = 2
focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 0.0
margin/top = 0.0
margin/right = 0.0
margin/bottom = 0.475
custom_fonts/font = ExtResource( 1 )
text = "123"
align = 1
valign = 1
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="RodControl" type="Panel" parent="."]

anchor/left = 3
anchor/top = 1
anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 100.0
margin/right = 0.0
margin/bottom = 0.0
script/script = SubResource( 7 )

[node name="Rod" type="Panel" parent="RodControl"]

editor/display_folded = true
anchor/left = 1
anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 200.0
margin/top = 0.0
margin/right = 0.0
margin/bottom = 0.0

[node name="Up" type="Button" parent="RodControl/Rod"]

anchor/left = 1
anchor/right = 1
anchor/bottom = 2
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 60.0
margin/top = 0.0
margin/right = 0.0
margin/bottom = 0.5
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
text = "^"
flat = false

[node name="Down" type="Button" parent="RodControl/Rod"]

anchor/left = 1
anchor/top = 2
anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 60.0
margin/top = 0.5
margin/right = 0.0
margin/bottom = 0.0
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
text = "v"
flat = false

[node name="Id" type="Label" parent="RodControl/Rod"]

focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 0.0
margin/top = 0.0
margin/right = 40.0
margin/bottom = 14.0
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="Pos" type="Label" parent="RodControl/Rod"]

focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 0.0
margin/top = 20.0
margin/right = 40.0
margin/bottom = 34.0
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="Shift" type="Button" parent="RodControl/Rod"]

anchor/top = 1
anchor/bottom = 1
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 40.0
margin/right = 40.0
margin/bottom = 0.0
toggle_mode = true
enabled_focus_mode = 2
shortcut = null
text = "SH"
flat = false

[node name="Help" type="WindowDialog" parent="."]

visibility/visible = false
anchor/left = 3
anchor/top = 3
anchor/right = 3
anchor/bottom = 3
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 260.0
margin/top = 160.0
margin/right = -260.0
margin/bottom = -180.0
popup/exclusive = true
window/title = "Help"

[node name="Label" type="Label" parent="Help"]

anchor/right = 1
anchor/bottom = 1
focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 8.0
margin/top = 8.0
margin/right = 8.0
margin/bottom = 8.0
text = "Welcome to gd_pwr game!

This is a simple game about controlling of nuclear reactor. This game was made in a week, so it have a some amount of content and gameplay features.

Your task is increasing and holding of reactor thermal power (signed as \"Power\") up to range from 16000 to 18000 kW. You should hold this power during 30 in-game minutes.

To control reactor power you should to move control rods up and down.
- Choose control rod on right panel
- To increase power in area of channel up control rod throught down left panel by clicking button ( ^ ). To down control rod and decrease power click on button ( v ).

Следите за периодом реактора, период менее 10 с опасен и может привести к неконтролируемому подъему мощности."
autowrap = true
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="Timer" type="Timer" parent="."]

process_mode = 1
wait_time = 1.0
one_shot = false
autostart = false

[connection signal="pressed" from="MainPanel/Time/Button" to="MainPanel" method="_on_Button_pressed"]

[connection signal="value_changed" from="MainPanel/Time/HSlider" to="MainPanel" method="_on_HSlider_value_changed"]

[connection signal="pressed" from="MainPanel/HelpBtn" to="MainPanel" method="_on_HelpBtn_pressed"]

[connection signal="toggled" from="ReactorPanel/PowerDisp" to="ReactorPanel" method="_on_PowerDisp_toggled"]

[connection signal="pressed" from="RodControl/Rod/Up" to="RodControl" method="_on_RodUp_pressed"]

[connection signal="pressed" from="RodControl/Rod/Down" to="RodControl" method="_on_RodDown_pressed"]

[connection signal="pressed" from="RodControl/Rod/Shift" to="RodControl" method="_on_Shift_pressed"]

[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]


